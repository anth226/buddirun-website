type Task @aws_iam @aws_cognito_user_pools {
    id: ID!
    title: String!
    description: String
    status: String
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
    _version: Int!
    _deleted: Boolean
    _lastChangedAt: AWSTimestamp!
}

type PrivateNote @aws_iam @aws_cognito_user_pools {
    id: ID!
    content: String!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
    _version: Int!
    _deleted: Boolean
    _lastChangedAt: AWSTimestamp!
    owner: String
}

input ModelStringInput {
    ne: String
    eq: String
    le: String
    lt: String
    ge: String
    gt: String
    contains: String
    notContains: String
    between: [String]
    beginsWith: String
    attributeExists: Boolean
    attributeType: ModelAttributeTypes
    size: ModelSizeInput
}

input ModelIntInput {
    ne: Int
    eq: Int
    le: Int
    lt: Int
    ge: Int
    gt: Int
    between: [Int]
    attributeExists: Boolean
    attributeType: ModelAttributeTypes
}

input ModelFloatInput {
    ne: Float
    eq: Float
    le: Float
    lt: Float
    ge: Float
    gt: Float
    between: [Float]
    attributeExists: Boolean
    attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
    ne: Boolean
    eq: Boolean
    attributeExists: Boolean
    attributeType: ModelAttributeTypes
}

input ModelIDInput {
    ne: ID
    eq: ID
    le: ID
    lt: ID
    ge: ID
    gt: ID
    contains: ID
    notContains: ID
    between: [ID]
    beginsWith: ID
    attributeExists: Boolean
    attributeType: ModelAttributeTypes
    size: ModelSizeInput
}

enum ModelAttributeTypes {
    binary
    binarySet
    bool
    list
    map
    number
    numberSet
    string
    stringSet
    _null
}

input ModelSizeInput {
    ne: Int
    eq: Int
    le: Int
    lt: Int
    ge: Int
    gt: Int
    between: [Int]
}

enum ModelSortDirection {
    ASC
    DESC
}

type ModelTaskConnection @aws_iam @aws_cognito_user_pools {
    items: [Task]!
    nextToken: String
    startedAt: AWSTimestamp
}

input ModelTaskFilterInput {
    id: ModelIDInput
    title: ModelStringInput
    description: ModelStringInput
    status: ModelStringInput
    and: [ModelTaskFilterInput]
    or: [ModelTaskFilterInput]
    not: ModelTaskFilterInput
}

type Query {
    getTask(id: ID!): Task @aws_iam @aws_cognito_user_pools
    listTasks(filter: ModelTaskFilterInput, limit: Int, nextToken: String): ModelTaskConnection @aws_iam @aws_cognito_user_pools
    syncTasks(filter: ModelTaskFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelTaskConnection @aws_iam @aws_cognito_user_pools
    getPrivateNote(id: ID!): PrivateNote @aws_iam @aws_cognito_user_pools
    listPrivateNotes(filter: ModelPrivateNoteFilterInput, limit: Int, nextToken: String): ModelPrivateNoteConnection @aws_iam @aws_cognito_user_pools
    syncPrivateNotes(filter: ModelPrivateNoteFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPrivateNoteConnection @aws_iam @aws_cognito_user_pools
}

input ModelTaskConditionInput {
    title: ModelStringInput
    description: ModelStringInput
    status: ModelStringInput
    and: [ModelTaskConditionInput]
    or: [ModelTaskConditionInput]
    not: ModelTaskConditionInput
}

input CreateTaskInput {
    id: ID
    title: String!
    description: String
    status: String
    _version: Int
}

input UpdateTaskInput {
    id: ID!
    title: String
    description: String
    status: String
    _version: Int
}

input DeleteTaskInput {
    id: ID!
    _version: Int
}

type Mutation {
    createTask(input: CreateTaskInput!, condition: ModelTaskConditionInput): Task @aws_iam @aws_cognito_user_pools
    updateTask(input: UpdateTaskInput!, condition: ModelTaskConditionInput): Task @aws_iam @aws_cognito_user_pools
    deleteTask(input: DeleteTaskInput!, condition: ModelTaskConditionInput): Task @aws_iam @aws_cognito_user_pools
    createPrivateNote(input: CreatePrivateNoteInput!, condition: ModelPrivateNoteConditionInput): PrivateNote @aws_iam @aws_cognito_user_pools
    updatePrivateNote(input: UpdatePrivateNoteInput!, condition: ModelPrivateNoteConditionInput): PrivateNote @aws_iam @aws_cognito_user_pools
    deletePrivateNote(input: DeletePrivateNoteInput!, condition: ModelPrivateNoteConditionInput): PrivateNote @aws_iam @aws_cognito_user_pools
}

type Subscription {
    onCreateTask: Task @aws_subscribe(mutations: ["createTask"]) @aws_iam @aws_cognito_user_pools
    onUpdateTask: Task @aws_subscribe(mutations: ["updateTask"]) @aws_iam @aws_cognito_user_pools
    onDeleteTask: Task @aws_subscribe(mutations: ["deleteTask"]) @aws_iam @aws_cognito_user_pools
    onCreatePrivateNote(owner: String): PrivateNote @aws_subscribe(mutations: ["createPrivateNote"]) @aws_iam @aws_cognito_user_pools
    onUpdatePrivateNote(owner: String): PrivateNote @aws_subscribe(mutations: ["updatePrivateNote"]) @aws_iam @aws_cognito_user_pools
    onDeletePrivateNote(owner: String): PrivateNote @aws_subscribe(mutations: ["deletePrivateNote"]) @aws_iam @aws_cognito_user_pools
}

type ModelPrivateNoteConnection @aws_iam @aws_cognito_user_pools {
    items: [PrivateNote]!
    nextToken: String
    startedAt: AWSTimestamp
}

input ModelPrivateNoteFilterInput {
    id: ModelIDInput
    content: ModelStringInput
    and: [ModelPrivateNoteFilterInput]
    or: [ModelPrivateNoteFilterInput]
    not: ModelPrivateNoteFilterInput
}

input ModelPrivateNoteConditionInput {
    content: ModelStringInput
    and: [ModelPrivateNoteConditionInput]
    or: [ModelPrivateNoteConditionInput]
    not: ModelPrivateNoteConditionInput
}

input CreatePrivateNoteInput {
    id: ID
    content: String!
    _version: Int
}

input UpdatePrivateNoteInput {
    id: ID!
    content: String
    _version: Int
}

input DeletePrivateNoteInput {
    id: ID!
    _version: Int
}

